import requests
import csv
from io import StringIO # To treat a string as a file
import plotly.express as px

# 1. WWW: Fetch CSV data from a URL
CSV_URL = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv'

print(f"Fetching data from {CSV_URL}...")
try:
    response = requests.get(CSV_URL)
    response.raise_for_status() # Raise an exception for HTTP errors (4xx or 5xx)
    csv_text_data = response.text
    print("Data fetched successfully!")
except requests.exceptions.RequestException as e:
    print(f"Error fetching data: {e}")
    exit()

# 2. CSV Handling: Parse the CSV data
# Use StringIO to treat the string data as a file-like object
data_rows = []
csv_file = StringIO(csv_text_data)
csv_reader = csv.reader(csv_file)

header = next(csv_reader) # Get the header row
for row in csv_reader:
    # Attempt to convert numerical values from string to float
    try:
        # Iris dataset: sepal_length, sepal_width, petal_length, petal_width, species
        row[0] = float(row[0]) # sepal_length
        row[1] = float(row[1]) # sepal_width
        row[2] = float(row[2]) # petal_length
        row[3] = float(row[3]) # petal_width
        # row[4] (species) remains a string
    except ValueError:
        print(f"Warning: Could not convert row to numbers: {row}")
        continue # Skip rows with conversion errors if any
    data_rows.append(row)

print(f"Parsed {len(data_rows)} rows of data.")

# 3. Python Libraries: Prepare data for plotting with Plotly
# We'll create a scatter plot of sepal_length vs. sepal_width, colored by species
# Extracting data for Plotly
sepal_lengths = [row[0] for row in data_rows]
sepal_widths = [row[1] for row in data_rows]
species = [row[4] for row in data_rows]

# Create an interactive scatter plot
fig = px.scatter(
    x=sepal_lengths,
    y=sepal_widths,
    color=species,
    labels={'x': 'Sepal Length (cm)', 'y': 'Sepal Width (cm)', 'color': 'Species'},
    title='Iris Sepal Length vs. Sepal Width by Species'
)

# Get the HTML for the plot (can be embedded directly)
# include_plotlyjs='cdn' means it will link to Plotly's JS library from a CDN
# full_html=False means it gives just the div for the plot, not a full HTML page
plot_html_div = fig.to_html(full_html=False, include_plotlyjs='cdn')
print("Plot generated.")

# 4. HTML and CSS: Generate the HTML content
# First, let's create a simple HTML table for the first 10 data entries
table_html_rows = ""
for r in data_rows[:10]: # Display first 10 rows
    table_html_rows += "<tr>"
    for cell in r:
        table_html_rows += f"<td>{cell}</td>"
    table_html_rows += "</tr>\n"

html_table_header = "<tr>" + "".join([f"<th>{h}</th>" for h in header]) + "</tr>"

html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iris Dataset Report</title>
    <!-- Link to our CSS file -->
    <link rel="stylesheet" href="styles.css">
    <!-- Plotly.js will be included via CDN as specified in fig.to_html() -->
</head>
<body>
    <header>
        <h1>Iris Flower Dataset Analysis</h1>
    </header>

    <section id="data-table">
        <h2>Sample Data (First 10 Rows)</h2>
        <table>
            <thead>
                {html_table_header}
            </thead>
            <tbody>
                {table_html_rows}
            </tbody>
        </table>
    </section>

    <section id="plot">
        <h2>Interactive Scatter Plot</h2>
        <p>This plot shows Sepal Length vs. Sepal Width, colored by species. You can hover over points, zoom, and pan.</p>
        <!-- Embed the Plotly plot div here -->
        {plot_html_div}
    </section>

    <footer>
        <p>Report generated by a Python script using requests, csv, and Plotly.</p>
    </footer>
</body>
</html>
"""

# 5. Write the HTML to a file
output_html_file = "iris_report.html"
with open(output_html_file, "w", encoding="utf-8") as f:
    f.write(html_content)

print(f"HTML report '{output_html_file}' generated successfully!")
print(f"Make sure you also have 'styles.css' in the same directory.")